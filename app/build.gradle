plugins {
    id 'com.android.application'
}

// --- Verify built-in extensions are real files (not Git LFS pointers) ---
def ublockManifest = file("${project.projectDir}/src/main/assets/extensions/uBlockOriginMV2/manifest.json")
def ublockManaged = file("${project.projectDir}/src/main/assets/extensions/uBlockOriginMV2/managed_storage.json")

tasks.register('verifyUblockAssets') {
    doLast {
        def failWith = { msg ->
            throw new GradleException("[uBlock Assets] " + msg + "\nPlease ensure real assets are present (avoid Git LFS pointers) before building the app.")
        }
        if (!ublockManifest.exists()) {
            failWith("manifest.json is missing at: ${ublockManifest}")
        }
        if (!ublockManaged.exists()) {
            failWith("managed_storage.json is missing at: ${ublockManaged}")
        }
        def isPointer = { f ->
            def head = f.newReader().withCloseable { r -> r.readLine() ?: '' }
            return head.trim().startsWith('version https://git-lfs')
        }
        if (isPointer(ublockManifest)) {
            failWith("manifest.json appears to be a Git LFS pointer: ${ublockManifest}")
        }
        if (isPointer(ublockManaged)) {
            failWith("managed_storage.json appears to be a Git LFS pointer: ${ublockManaged}")
        }
        // Basic sanity: JSON should start with '{' or '['
        def firstChar = ublockManifest.getText().trim().take(1)
        if (!(firstChar == '{' || firstChar == '[')) {
            failWith("manifest.json does not look like valid JSON at: ${ublockManifest}")
        }
    }
}

// Ensure we verify before packaging APK/AAB
tasks.matching { it.name in [
        'preDebugBuild', 'preReleaseBuild',
        'mergeDebugAssets', 'mergeReleaseAssets',
        'packageDebug', 'packageRelease'
] }.configureEach { it.dependsOn tasks.named('verifyUblockAssets') }

android {
    compileSdkVersion 34
    defaultConfig {
        applicationId "com.neew.browser"
        minSdkVersion 21
        targetSdkVersion 35
        // versionCode and versionName will be set below using Git
        // ndk {
        //     abiFilters "arm64-v8a"
        // }
        versionName "1.7.0"
    }
    // Ensure asset directories starting with '_' (e.g., '_locales/') are not excluded by packaging
    // By default, aapt may ignore certain patterns; setting an empty pattern disables extra ignores
    aaptOptions {
        ignoreAssetsPattern ""
    }
    signingConfigs {
        release {
            storeFile file("indic-browser-key.jks")
            storePassword "IndicBrowser2025"
            keyAlias "indic-browser-key"
            keyPassword "IndicBrowser2025"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    namespace 'com.neew.browser'

    buildFeatures {
        buildConfig = true
    }

    def getVersionNameFromGit = { ->
        try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'describe', '--tags', '--abbrev=0'
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } catch (Exception e) {
            return "1.0.0"
        }
    }
    def getVersionCodeFromGit = { ->
        try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-list', '--count', 'HEAD'
                standardOutput = stdout
            }
            return 200 + Integer.parseInt(stdout.toString().trim())
        } catch (Exception e) {
            return 201 // Base offset + 1 as a fallback
        }
    }
    defaultConfig.versionName = getVersionNameFromGit()
    defaultConfig.versionCode = getVersionCodeFromGit() // Respects manually set versionCode above

    splits {
        abi {
            enable true
            reset()
            include 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
            universalApk true // Changed to true to ensure TV compatibility
        }
    }
}

ext {
    geckoviewVersion = "129.0.20240801122119"
    geckoviewChannel = "stable"
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "org.mozilla.geckoview:geckoview:129.0.20240801122119"
    implementation 'androidx.activity:activity:1.8.0'
    implementation 'com.google.firebase:firebase-analytics:21.5.0'
    implementation 'androidx.leanback:leanback:1.0.0' // Added for TV support
    implementation 'androidx.tvprovider:tvprovider:1.0.0' // Added for TV support
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
} 

apply plugin: 'com.google.gms.google-services' 